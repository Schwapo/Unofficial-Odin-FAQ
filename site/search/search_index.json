{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Hey, my name is Antonio Rafael Antunes Miranda a.k.a. Schwapo. I've created this website to answer frequently asked questions from the Odin Inspector Discord Channel . I will try to update this repository whenever I feel that a question is getting asked a lot and I have an answer for it. I'd recommend the following steps in order to find a solution to your problem. Check Odins Attribute Examples , Documentation or Tutorials . Check this site. Check the official Discord Channel and use the search function to see if someone else had the same question and got an answer. Ask for help in the Discord Channel . This is not an official Odin FAQ and I'm not in any way associated with Sirenix.","title":"Welcome"},{"location":"#welcome","text":"Hey, my name is Antonio Rafael Antunes Miranda a.k.a. Schwapo. I've created this website to answer frequently asked questions from the Odin Inspector Discord Channel . I will try to update this repository whenever I feel that a question is getting asked a lot and I have an answer for it. I'd recommend the following steps in order to find a solution to your problem. Check Odins Attribute Examples , Documentation or Tutorials . Check this site. Check the official Discord Channel and use the search function to see if someone else had the same question and got an answer. Ask for help in the Discord Channel . This is not an official Odin FAQ and I'm not in any way associated with Sirenix.","title":"Welcome"},{"location":"changing-the-preview-field-preview/","text":"Changing The PreviewField Preview Unfortunately, there is no default way to change the preview that the PreviewField attribute shows because Odin just asks Unity for a preview texture and shows whatever it gets. If you really need it you can create a custom attribute yourself that is capable of showing a different preview texture or you can use the attribute I created called ObjectPreview which has a lot of features that people asked for in the Discord Channel .","title":"Changing The PreviewField Preview"},{"location":"changing-the-preview-field-preview/#changing-the-previewfield-preview","text":"Unfortunately, there is no default way to change the preview that the PreviewField attribute shows because Odin just asks Unity for a preview texture and shows whatever it gets. If you really need it you can create a custom attribute yourself that is capable of showing a different preview texture or you can use the attribute I created called ObjectPreview which has a lot of features that people asked for in the Discord Channel .","title":"Changing The PreviewField Preview"},{"location":"foldout-expanded-by-default/","text":"Foldout Expanded By Default By using a combination of the Property States system and Odin's OnInspectorInit attribute we can set the state of the foldout everytime the inspector initializes. 1 2 3 4 5 6 7 8 9 10 11 // Example class [System.Serializable] public class SomeClass { public float SomeField ; public float SomeOtherField ; public float AnotherField ; } [OnInspectorInit(\"@$property.State.Expanded = true\")] public SomeClass ClassInstance ; The @ sign denotes this string as an Attribute Expression which makes everything behind it be basically treated as normal code. $property is a Named Value and gives us the InspectorProperty of the ClassInstance field. It holds the foldout's state which we can then set directly.","title":"Foldout Expanded By Default"},{"location":"foldout-expanded-by-default/#foldout-expanded-by-default","text":"By using a combination of the Property States system and Odin's OnInspectorInit attribute we can set the state of the foldout everytime the inspector initializes. 1 2 3 4 5 6 7 8 9 10 11 // Example class [System.Serializable] public class SomeClass { public float SomeField ; public float SomeOtherField ; public float AnotherField ; } [OnInspectorInit(\"@$property.State.Expanded = true\")] public SomeClass ClassInstance ; The @ sign denotes this string as an Attribute Expression which makes everything behind it be basically treated as normal code. $property is a Named Value and gives us the InspectorProperty of the ClassInstance field. It holds the foldout's state which we can then set directly.","title":"Foldout Expanded By Default"},{"location":"hide-the-reference-picker/","text":"Hide The Reference Picker You can add the HideReferenceObjectPicker attribute to the class to hide the reference picker. 1 2 3 4 5 6 7 8 [HideReferenceObjectPicker] public interface ISomeInterface { float SomeField { get ; set ; } float SomeOtherField { get ; set ; } } public ISomeInterface SomeInterfaceField ; You can also add the attribute to the SomeInterfaceField instead if you only want to hide the reference picker for that specific instance.","title":"Hide The Reference Picker"},{"location":"hide-the-reference-picker/#hide-the-reference-picker","text":"You can add the HideReferenceObjectPicker attribute to the class to hide the reference picker. 1 2 3 4 5 6 7 8 [HideReferenceObjectPicker] public interface ISomeInterface { float SomeField { get ; set ; } float SomeOtherField { get ; set ; } } public ISomeInterface SomeInterfaceField ; You can also add the attribute to the SomeInterfaceField instead if you only want to hide the reference picker for that specific instance.","title":"Hide The Reference Picker"},{"location":"missing-features/","text":"Missing Features Unity's package manager sometimes messes up the update which leads to it not actually updating the version and just silently pretending that everything is fine. Make sure that you're actually on the version you believe to be by navigating to Tools > OdinInspector > About . If it's not showing the expected version number delete Unity's package manager cache and update Odin again. This usually fixes the problem. Unity's package manager cache is usually located at: %appdata%/Unity/Asset Store-5.x for windows.","title":"Missing Features"},{"location":"missing-features/#missing-features","text":"Unity's package manager sometimes messes up the update which leads to it not actually updating the version and just silently pretending that everything is fine. Make sure that you're actually on the version you believe to be by navigating to Tools > OdinInspector > About . If it's not showing the expected version number delete Unity's package manager cache and update Odin again. This usually fixes the problem. Unity's package manager cache is usually located at: %appdata%/Unity/Asset Store-5.x for windows.","title":"Missing Features"},{"location":"remove-unitys-default-foldout/","text":"Remove Unity's Default Foldout By adding the InlineProperty Attribute to the class we can tell Odin to draw the contents of the class inline meaning no drop-down will be drawn. 1 2 3 4 5 6 7 8 9 10 [InlineProperty] [System.Serializable] public class SomeClass { public float SomeField ; public float SomeOtherField ; public float AnotherField ; } public SomeClass ClassInstance ; By itself, this will leave the label of the field which will indent all fields contained in the class. Adding the HideLabel Attribute removes that label, leaving us with the desired result. 1 2 3 4 5 6 7 8 9 10 11 [HideLabel] [InlineProperty] [System.Serializable] public class SomeClass { public float SomeField ; public float SomeOtherField ; public float AnotherField ; } public SomeClass ClassInstance ; You can also add these attributes to the ClassInstance instead if you only want that specific instance to not have the drop-down.","title":"Remove Unity's Default Foldout"},{"location":"remove-unitys-default-foldout/#remove-unitys-default-foldout","text":"By adding the InlineProperty Attribute to the class we can tell Odin to draw the contents of the class inline meaning no drop-down will be drawn. 1 2 3 4 5 6 7 8 9 10 [InlineProperty] [System.Serializable] public class SomeClass { public float SomeField ; public float SomeOtherField ; public float AnotherField ; } public SomeClass ClassInstance ; By itself, this will leave the label of the field which will indent all fields contained in the class. Adding the HideLabel Attribute removes that label, leaving us with the desired result. 1 2 3 4 5 6 7 8 9 10 11 [HideLabel] [InlineProperty] [System.Serializable] public class SomeClass { public float SomeField ; public float SomeOtherField ; public float AnotherField ; } public SomeClass ClassInstance ; You can also add these attributes to the ClassInstance instead if you only want that specific instance to not have the drop-down.","title":"Remove Unity's Default Foldout"},{"location":"serialization-doesnt-work/","text":"Serialization Doesn't Work If you're having issues serializing values follow these steps to remove the most common errors. Remove any serialization attributes from your class. Open the Serialization Debugger inside the inspector. You can find it by opening the Context Menu of the MonoBehaviour / ScriptableObject and clicking on Debug Serialization Follow the steps that the debugger recommends at the bottom of the debugger window. If you're trying to serialize a Dictionary and you have issues with it, make sure that you didn't select SerializableDictionary<T1, T2> from the object reference picker.","title":"Serialization Doesn't Work"},{"location":"serialization-doesnt-work/#serialization-doesnt-work","text":"If you're having issues serializing values follow these steps to remove the most common errors. Remove any serialization attributes from your class. Open the Serialization Debugger inside the inspector. You can find it by opening the Context Menu of the MonoBehaviour / ScriptableObject and clicking on Debug Serialization Follow the steps that the debugger recommends at the bottom of the debugger window. If you're trying to serialize a Dictionary and you have issues with it, make sure that you didn't select SerializableDictionary<T1, T2> from the object reference picker.","title":"Serialization Doesn't Work"},{"location":"showif-hideif-multiple-conditions/","text":"ShowIf / HideIf Multiple Conditions In order to be able to have multiple conditions inside a ShowIf / HideIf attribute we have to make use of Odin's Attribute Expressions . They allow us to basically write normal code inside the attributes Resolver string. 1 2 3 4 5 6 7 8 public bool ShowField ; public bool HideField ; [ShowIf(\"@ShowField && !HideField\")] public float SomeField ; [HideIf(\"@!ShowField && HideField\")] public float SomeField ; The @ sign denotes this string as an Attribute Expression and everything behind it is just how you would write it in a normal if statement.","title":"ShowIf / HideIf Multiple Conditions"},{"location":"showif-hideif-multiple-conditions/#showif-hideif-multiple-conditions","text":"In order to be able to have multiple conditions inside a ShowIf / HideIf attribute we have to make use of Odin's Attribute Expressions . They allow us to basically write normal code inside the attributes Resolver string. 1 2 3 4 5 6 7 8 public bool ShowField ; public bool HideField ; [ShowIf(\"@ShowField && !HideField\")] public float SomeField ; [HideIf(\"@!ShowField && HideField\")] public float SomeField ; The @ sign denotes this string as an Attribute Expression and everything behind it is just how you would write it in a normal if statement.","title":"ShowIf / HideIf Multiple Conditions"},{"location":"groups/nesting-groups/","text":"Nesting Groups Groups are nested like folder paths. For example If you want to nest a HorizontalGroup inside a BoxGroup you do: 1 2 3 4 5 [BoxGroup(\"Box\")] public float SomeField ; [HorizontalGroup(\"Box/Horizontal\")] public float SomeOtherField ; 1 2 \ud83d\udcc1 Box \u2514\u2500 \ud83d\udcc1 Horizontal Visualizing it like this also shows that you always have to create the previous \"folder\" since you cannot create a folder inside another folder that doesn't exist. That doesn't mean that the group attribute needs to be before other groups that are nested inside of it as order doesn't matter when defining groups. It just means that it needs to exist somewhere inside this file. 1 2 3 // Error since the SomeGroupName \"folder\" doesn't exist [HorizontalGroup(\"SomeGroupName/Horizontal\")] public float AnotherField ; If you create a nested group path and the previous \"folder\" doesn't exist you get an exception like this: Group attribute 'HorizontalGroupAttribute' on member 'AnotherField' expected a group with the name 'SomeGroupName' to exist in declaring type 'SomeMonoBehaviour'. Its ID was 'SomeGroupName/Horizontal'. Nesting TabGroups has a slightly different behaviour you can learn about it here","title":"Nesting Groups"},{"location":"groups/nesting-groups/#nesting-groups","text":"Groups are nested like folder paths. For example If you want to nest a HorizontalGroup inside a BoxGroup you do: 1 2 3 4 5 [BoxGroup(\"Box\")] public float SomeField ; [HorizontalGroup(\"Box/Horizontal\")] public float SomeOtherField ; 1 2 \ud83d\udcc1 Box \u2514\u2500 \ud83d\udcc1 Horizontal Visualizing it like this also shows that you always have to create the previous \"folder\" since you cannot create a folder inside another folder that doesn't exist. That doesn't mean that the group attribute needs to be before other groups that are nested inside of it as order doesn't matter when defining groups. It just means that it needs to exist somewhere inside this file. 1 2 3 // Error since the SomeGroupName \"folder\" doesn't exist [HorizontalGroup(\"SomeGroupName/Horizontal\")] public float AnotherField ; If you create a nested group path and the previous \"folder\" doesn't exist you get an exception like this: Group attribute 'HorizontalGroupAttribute' on member 'AnotherField' expected a group with the name 'SomeGroupName' to exist in declaring type 'SomeMonoBehaviour'. Its ID was 'SomeGroupName/Horizontal'. Nesting TabGroups has a slightly different behaviour you can learn about it here","title":"Nesting Groups"},{"location":"groups/nesting-tab-groups/","text":"Nesting TabGroups Nesting TabGroups correctly requires you to know how Nesting Groups works in general and how TabGroups differ from normal groups. The first thing you need to know is that there are two different overloads of the TabGroup constructor. The first one looks like this: 1 2 3 public TabGroupAttribute ( string tab , bool useFixedHeight = false , float order = 0f ) : this ( \"_DefaultTabGroup\" , tab , useFixedHeight , order ) Usually you only provide the tab parameter which decides how the tab is named and referenced when nesting. As you can see we call the base constructor and pass _DefaultTabGroup as the group name. This results in the final group path \"_DefaultTabGroup/TabInsideTheFirstGroup\" 1 2 [TabGroup(\"TabInsideTheFirstGroup\")] public float SomeField ; If you now want to nest another TabGroup inside this group you will have to provide the full path of the previous group and add the new group name to it. 1 2 [TabGroup(\"_DefaultTabGroup/TabInsideTheFirstGroup/SecondTabGroup\", \"TabInsideTheSecondGroup\")] public float SomeOtherField ; The second constructor looks like this: 1 2 3 public TabGroupAttribute ( string group , string tab , bool useFixedHeight = false , float order = 0f ) : base ( group , order ) This constructor allows you to pass in a group name to use instead of _DefaultTabGroup . I would recommend to always use this way to define a tab group as it makes it easier to understand. Now, instead of using _DefaultTabGroup when nesting your group use your provided group name. 1 2 3 4 5 [TabGroup(\"FirstGroup\", \"TabInsideFirstGroup\")] public float SomeField ; [TabGroup(\"FirstGroup/TabInsideFirstGroup/SecondGroup\", \"TabInsideSecondGroup\")] public float SomeOtherField ; If you have missing or duplicate elements, make sure to check your group path this is a sign that you did not nest your group correctly.","title":"Nesting  TabGroups"},{"location":"groups/nesting-tab-groups/#nesting-tabgroups","text":"Nesting TabGroups correctly requires you to know how Nesting Groups works in general and how TabGroups differ from normal groups. The first thing you need to know is that there are two different overloads of the TabGroup constructor. The first one looks like this: 1 2 3 public TabGroupAttribute ( string tab , bool useFixedHeight = false , float order = 0f ) : this ( \"_DefaultTabGroup\" , tab , useFixedHeight , order ) Usually you only provide the tab parameter which decides how the tab is named and referenced when nesting. As you can see we call the base constructor and pass _DefaultTabGroup as the group name. This results in the final group path \"_DefaultTabGroup/TabInsideTheFirstGroup\" 1 2 [TabGroup(\"TabInsideTheFirstGroup\")] public float SomeField ; If you now want to nest another TabGroup inside this group you will have to provide the full path of the previous group and add the new group name to it. 1 2 [TabGroup(\"_DefaultTabGroup/TabInsideTheFirstGroup/SecondTabGroup\", \"TabInsideTheSecondGroup\")] public float SomeOtherField ; The second constructor looks like this: 1 2 3 public TabGroupAttribute ( string group , string tab , bool useFixedHeight = false , float order = 0f ) : base ( group , order ) This constructor allows you to pass in a group name to use instead of _DefaultTabGroup . I would recommend to always use this way to define a tab group as it makes it easier to understand. Now, instead of using _DefaultTabGroup when nesting your group use your provided group name. 1 2 3 4 5 [TabGroup(\"FirstGroup\", \"TabInsideFirstGroup\")] public float SomeField ; [TabGroup(\"FirstGroup/TabInsideFirstGroup/SecondGroup\", \"TabInsideSecondGroup\")] public float SomeOtherField ; If you have missing or duplicate elements, make sure to check your group path this is a sign that you did not nest your group correctly.","title":"Nesting  TabGroups"},{"location":"groups/space-between-groups/","text":"Space Between Groups As of now the VerticalGroup is the only group that has parameters to add vertical spacing. In order to add vertical spacing to other groups you have to nest them inside a VerticalGroup like this. 1 2 3 [VerticalGroup(\"Space\", PaddingTop = 20f, PaddingBottom = 20f)] [BoxGroup(\"Space/Box\")] public float SomeField ; The VerticalGroup's sole purpose is to add vertical spacing using the PaddingTop & PaddingBottom parameters. The same principle applies to all other groups.","title":"Space Between Groups"},{"location":"groups/space-between-groups/#space-between-groups","text":"As of now the VerticalGroup is the only group that has parameters to add vertical spacing. In order to add vertical spacing to other groups you have to nest them inside a VerticalGroup like this. 1 2 3 [VerticalGroup(\"Space\", PaddingTop = 20f, PaddingBottom = 20f)] [BoxGroup(\"Space/Box\")] public float SomeField ; The VerticalGroup's sole purpose is to add vertical spacing using the PaddingTop & PaddingBottom parameters. The same principle applies to all other groups.","title":"Space Between Groups"}]}